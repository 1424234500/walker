<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>


    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.6.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <artifactId>walker-web</artifactId>
    <name>web</name>
    <description> j2ee project, webUser,role,dpet,controll </description>
    <groupId>com.walker</groupId>
    <version>0.0.1</version>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java.version>1.8</java.version>
        <spring_boot.version>2.0.3.RELEASE</spring_boot.version>
        <druid.version>1.1.6</druid.version>

        <!--    源码结构
                project/*
                    目录脚本 bin    server.sh
                    目录配置 conf
                    目录源码 src/main/java
                                    /resource
                                        /mapper
                                        /static
                                        config.files
                    目录资源 vue

                打包结构
                deploy/* <- project/*
                    目录依赖 lib/        dependency.jar
                    目录资源 static/     html
                    目录db   mapper/     mybatis xml
                    文件配置 config properties xml yml
                    文件脚本 server.sh
        -->
        <dir_name_resource>src/main/resources</dir_name_resource>
        <dir_name_bin>bin</dir_name_bin>
        <dir_name_conf>conf</dir_name_conf>
        <dir_name_lib>lib</dir_name_lib>
        <dir_name_vue>vue/dist</dir_name_vue>
        <dir_release>${basedir}/release</dir_release>
        <mainClass>com.walker.ApplicationWeb</mainClass>


    </properties>

    <build>
        <plugins>

            <!-- 0. 打包前拷贝静态资源 构建项目部署结构 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>2.6</version>
                <executions>
                    <!--拷贝前端压缩临时文件 cp vue/dist src/main/resources/static  -->
                    <execution>
                        <id>copy-resources-vue</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${dir_name_resource}/static</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${dir_name_vue}</directory>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <!--拷贝conf目录 cp  conf/* release/conf/* -->
                    <execution>
                        <id>copy-resources-conf</id>
                        <!-- 触发阶段 process-resources 执行 resources 插件的 copy-resources 目标 -->
                        <phase>process-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <resources>
                                <resource>
                                    <directory>${dir_name_conf}</directory>
                                    <!--  <filtering>true</filtering> -->
                                    <!-- <excludes> <exclude>WEB-INF/*.*</exclude> </excludes> -->
                                </resource>
                            </resources>
                            <outputDirectory>${dir_release}/${dir_name_conf}</outputDirectory>
                        </configuration>
                    </execution>
                    <!--拷贝bin目录 资源目录 cp  bin/*,src/main/resources/*  release/  -->
                    <execution>
                        <id>copy-resources-bin</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <resources>
                                <resource>
                                    <directory>${dir_name_bin}</directory>
                                </resource>
                                <resource>
                                    <directory>${dir_name_resource}</directory>
                                </resource>
                            </resources>
                            <outputDirectory>${dir_release}</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- 1. 编译配置-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>8</source>
                    <target>8</target>
                </configuration>
            </plugin>

            <!-- 2. mvn原生打包jar-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <!--不打包资源文件 避免jar包含配置 不方便修改 上文已经复制到目标 依赖manifest.mf配置资源路径 -->
                    <excludes>
                        <!--<exclude>*.**</exclude>  **/* -->
                        <!--<exclude>/**.*</exclude>-->
                        <!--<exclude>**/*</exclude>-->
                    </excludes>
                    <includes>
                        <include>com/**</include>
                    </includes>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <!--MANIFEST.MF 中 Class-Path 加入前缀 lib 后续自行复制到目标 -->
                            <classpathPrefix>${dir_name_lib}/</classpathPrefix>
                            <!--jar包不包含唯一版本标识-->
                            <useUniqueVersions>false</useUniqueVersions>
                            <!--指定入口类 springboot jar 区别 ? 自识别 -->
                            <mainClass>${mainClass}</mainClass>
                        </manifest>
                        <manifestEntries>
                            <!--MANIFEST.MF 中 Class-Path 加入资源文件目录-->
                            <Class-Path>./</Class-Path>
                        </manifestEntries>
                    </archive>
                    <outputDirectory>${project.build.directory}</outputDirectory>
                </configuration>
            </plugin>
            <!-- 3. 拷贝依赖 资源 cp lib/* release/* -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${dir_release}/${dir_name_lib}/ </outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- 4. spring boot 打包，依赖 maven-jar-plugin 打包的jar包 重新打包成 spring boot 的jar包-->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <!--重写包含依赖，包含不存在的依赖，jar里没有pom里的依赖 lib目录外置 不加则lib位于jar/BOOT-INF/lib-->
                    <includes>
                        <include>
                            <!--null-->
                            <groupId>nothing</groupId>
                            <artifactId>nothing</artifactId>
                        </include>
                    </includes>
                    <!--压缩格式-->
                    <layout>ZIP</layout>
                    <!--使用外部配置文件，jar包里没有资源文件-->
                    <addResources>false</addResources>
                    <outputDirectory>${project.build.directory}</outputDirectory>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- 5.  将打包后生成的jar复制到指定路径 命令mvn package后，才生成jar的包，如果单纯的用resources方法复制文件，是无法在package时复制一个还未存在的东西到某地的  -->
            <!--cp *jar release/-->
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-resources-jar</id>
                        <phase>package</phase>
                        <configuration>
                            <tasks>
                                <!-- <delete dir="src/main/webapp/WEB-INF/lib" />-->
                                <copy todir="${dir_release}">
                                    <fileset dir="${project.build.directory}">
                                        <include name="*.*jar" />
                                    </fileset>
                                </copy>
                            </tasks>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>


    <dependencies>
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>1.1.1</version>
        </dependency>

<!--        shiro权限控制？自己做控制？-->
        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-spring</artifactId>
            <version>1.3.2</version>
        </dependency>


<!--        <dependency>-->
<!--            <groupId>org.quartz-scheduler</groupId>-->
<!--            <artifactId>quartz</artifactId>-->
<!--            <version>2.3.2</version>-->
<!--            <exclusions>-->
<!--                <exclusion>-->
<!--                    <artifactId>slf4j-api</artifactId>-->
<!--                    <groupId>org.slf4j</groupId>-->
<!--                </exclusion>-->
<!--            </exclusions>-->
<!--        </dependency>-->

<!--        <dependency>&lt;!&ndash; 该依赖必加，里面有sping对schedule的支持 &ndash;&gt;-->
<!--            <groupId>org.springframework</groupId>-->
<!--            <artifactId>spring-context-support</artifactId>-->
<!--        </dependency>-->

        <dependency>
            <groupId>com.walker</groupId>
            <artifactId>walker-spring-core</artifactId>
            <version>0.0.1</version>
        </dependency>


        <dependency>
            <groupId>commons-dbcp</groupId>
            <artifactId>commons-dbcp</artifactId>
            <version>1.4</version>
        </dependency>
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.4.5</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>1.3.0</version>
            <scope>compile</scope>
        </dependency>

<!--        sentinel限流 熔断-->
        <dependency>
            <groupId>com.alibaba.csp</groupId>
            <artifactId>sentinel-core</artifactId>
            <version>1.6.0</version>
        </dependency>
<!--        sentinel控制台-->
        <dependency>
            <groupId>com.alibaba.csp</groupId>
            <artifactId>sentinel-transport-simple-http</artifactId>
            <version>1.6.0</version>
            <exclusions>
                <exclusion>
                    <groupId>com.alibaba</groupId>
                    <artifactId>fastjson</artifactId>
<!--                    <version>1.2.56</version>-->
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>
    </dependencies>


</project>
